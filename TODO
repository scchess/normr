TODO
###############################################################################

BUGFIXES
#############
DONE Fix tiling GenomicRanges
DONE Prevent tiling in char,char,GenomicRanges-function's


FUNCTIONALITY/ENHANCEMENTS
##########################
DONE  -link to new bamsignals
DONE  -if counting done, ask for giving counts
DONE  -correct removing strategy
      -> bin where either is 0 bc no support for model
DONE remove double computing with index structure or map
DONE logSumVector with nthreads > 1 gives wrong result
      -> summation of alot of values in imprecise
      -> used https://en.wikipedia.org/wiki/Kahan_summation_algorithm
      -> filed an issue about that
DONE removed difference call function (use only one function for all)
DONE check posterior distribution (benchmark) bc sometimes the results are
      different (if low number of enriched bins are present)
      -> no problem!
DONE summary function for NormRFit
DONE attach bamsignals mononucleosomal options
DONE use GenomicRanges::tile() function for binning genome
DONE put normR & diffR wrappers for counts directly
DONE pval for > 2 models in C++ (against putative background component)
DONE give adjusted p-values (with qvalue package in R)
DONE improve logging of Fit (ProcessID or ID (filenames...))
DONE -output function for bigWig/bedGraph files (sizes small with new
     rtracklayer)
DONE integrate bamsignals 1.4 features (tlenFilter, flagFilter)
DONE diffR() should report intersect of label switched inputs
DONE recompute Enrichment for a supplied background component
DONE summary() plot per regime
DONE summary() should report percentages at significance levels
DONE getEnrichment() with argument on standardization
DONE Lowering default T-filter to 0.01, adjusting tests
DONE introduce max iter for a certain starting configuration (identifiability)
DONE qvalue computation improvement by specifying a range for lambda_0

TODO getNormalizedCoverage() for a fine grained coverage based on an enrichR fit
TODO Allow setting a fixed beta for an interpolation fit
TODO BiocParallel implementation
TODO plotting function for NormRFit
TODO write CLI


PERFORMANCE
#############
DONE use reference to R objects wherever possible
DONE R: bamProfile for counting & remove mclapply counting
DONE C++: link against bamsignals for chromosomwise parallel counting
       -> not needee cuz bamProfile is really fast
DONE C++: parallel sort (compile with -D_GLIBCXX_PARALLEL -fopenmp)
DONE C++: run multiple iterations (argument) with differented deviations
DONE R:   a capsulated m2u structure for S4 object accessors!
DONE C++/R: after em fit it takes a long time to end the call
       -> pvalue computation done on unique values
DONE Setting SIMD flags conditional on OpenMP Version
     software.intel.com/en-us/articles/enabling-simd-in-program-using-openmp40
     wrathematics.github.io/RparallelGuide/#the-simd-keyword


STRUCTURE
#############
DONE rename: normalize()->enrichR();difference->diffR();regimecall()->regimeR()
DONE R: S4 classes NormRFit & BamCountConfig introduced
DONE R: S4 functions on DiffR (plotting, summary, print, ...)
DONE R: labels for identified components -> NO!


VIGNETTE
#############
DONE IGVshots on minimal data

TODO add CLI to vignette
TODO add NormRFit-class::plot() to vignette when implemented


TESTS
#############
DONE writing DESCRIPTION
DONE write tests for NormRFit.R
DONE write tests for methods.R (small toy data)
DONE check correctness of getEnrichmentWithMap & getEnrichment



DEPLOYMENT
#############
DONE update README

ALWAYS DO adjust version number to release schedule of BioC
ALWAYS DO check vignette for correctness of reported numbers
ALWAYS DO update dates & LICENSE HEADER in sourcefiles

TODO add citation for bioc


